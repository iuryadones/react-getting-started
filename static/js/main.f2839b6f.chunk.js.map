{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","props","sidebar","posts","map","post","key","id","title","content","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCqvBNC,IAASC,OACP,mBA9BF,SAAcC,GACZ,IAAMC,EACJ,4BACGD,EAAME,MAAMC,KAAI,SAACC,GAAD,OACf,wBAAIC,IAAKD,EAAKE,IACXF,EAAKG,WAKRC,EAAUR,EAAME,MAAMC,KAAI,SAACC,GAAD,OAC9B,yBAAKC,IAAKD,EAAKE,IACb,4BAAKF,EAAKG,OACV,2BAAIH,EAAKI,aAGb,OACE,6BACGP,EACD,6BACCO,KAUL,CAAMN,MALM,CACZ,CAACI,GAAI,EAAGC,MAAO,cAAeC,QAAS,8BACvC,CAACF,GAAI,EAAGC,MAAO,eAAgBC,QAAS,sCAIxCC,SAASC,eAAe,SDtoBpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2839b6f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// App 1\n// const name = 'Iury Adones'\n// var element = <h1>Hello, {name}!</h1>;\n// ReactDOM.render(\n//   element,\n//   document.getElementById('root')\n// );\n\n// App 2\n// function formatName(user) {\n//   return user.firstName + ' ' + user.lastName;\n// }\n// const user = {\n//   firstName: 'Iury',\n//   lastName: 'Adones'\n// };\n//\n// element = (\n//   <h1>\n//     Hello, {formatName(user)}!\n//   </h1>\n// );\n// ReactDOM.render(\n//   element,\n//   document.getElementById('root')\n// );\n\n// App 3\n// function getGreenting(user) {\n//   if (Object.keys(user).length) {\n//     return <h1>Hello, {formatName(user)}!</h1>;\n//   }\n//   return <h1>Hello, Stranger.</h1>;\n// }\n//\n// const userNull = {};\n//\n// element = getGreenting(userNull);\n//\n// ReactDOM.render(\n//   element,\n//   document.getElementById('root')\n// );\n\n// App 4\n// function tick() {\n//   const element = (\n//     <div>\n//       {getGreenting(user)}\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//     </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n// setInterval(tick, 1000);\n\n// App 5\n// function Welcome(props) {\n//   return <h1>Hello, {props.name}</h1>;\n// }\n//\n// var element = <Welcome name=\"Sara\" />;\n// ReactDOM.render(element, document.getElementById('root'));\n\n\n// App 6\n// function Welcome(props) {\n//   return <h1>Hello, {props.name}</h1>;\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <Welcome name=\"Sara\" />\n//       <Welcome name=\"Cahal\" />\n//       <Welcome name=\"Edite\" />\n//     </div>\n//   );\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\n// App 7\n// function formatDate(date) {\n//   return date.toLocaleDateString()\n// }\n//\n// function Comment(props) {\n//   return (\n//     <div className=\"Comment\">\n//       <div className=\"UserInfo\">\n//         <img className=\"Avatar\"\n//           src={props.author.avatarUrl}\n//           alt={props.author.name}\n//         />\n//         <div className=\"UserInfo-name\">\n//           {props.author.name}\n//         </div>\n//       </div>\n//       <div className=\"Comment-text\">\n//         {props.text}\n//       </div>\n//       <div className=\"Comment-date\">\n//         {formatDate(props.date)}\n//       </div>\n//     </div>\n//   );\n// }\n//\n// const comment = {\n//   date: new Date(),\n//   text: 'Ola mundo, text2tag saindo!',\n//   author: {\n//     'avatarUrl': 'https://placekitten.com/g/64/64',\n//     'name': 'Kurier',\n//   },\n// }\n//\n//\n// function App() {\n//   return (\n//     <div>\n//       <Comment\n//         author={comment.author}\n//         text={comment.text}\n//         date={comment.date}\n//       />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\n// App 8\n// function formatDate(date) {\n//   return date.toLocaleDateString()\n// }\n//\n// function Avatar(props) {\n//   return (\n//     <img className=\"Avatar\"\n//       src={props.user.avatarUrl}\n//       alt={props.user.name}\n//     />\n//\n//   );\n// }\n//\n// function Comment(props) {\n//   return (\n//     <div className=\"Comment\">\n//       <div className=\"UserInfo\">\n//         <Avatar user={props.author}/>\n//         <div className=\"UserInfo-name\">\n//           {props.author.name}\n//         </div>\n//       </div>\n//       <div className=\"Comment-text\">\n//         {props.text}\n//       </div>\n//       <div className=\"Comment-date\">\n//         {formatDate(props.date)}\n//       </div>\n//     </div>\n//   );\n// }\n//\n// const comment = {\n//   date: new Date(),\n//   text: 'Ola mundo, text2tag saindo!',\n//   author: {\n//     'avatarUrl': 'https://placekitten.com/g/64/64',\n//     'name': 'Kurier',\n//   },\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <Comment\n//         author={comment.author}\n//         text={comment.text}\n//         date={comment.date}\n//       />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\n// App 9\n// function formatDate(date) {\n//   return date.toLocaleDateString()\n// }\n//\n// function Avatar(props) {\n//   return (\n//     <img\n//       className=\"Avatar\"\n//       src={props.user.avatarUrl}\n//       alt={props.user.name}\n//     />\n//   );\n// }\n//\n// function UserInfo(props) {\n//   return (\n//     <div className=\"UserInfo\">\n//       <Avatar user={props.user} />\n//       <div className=\"UserInfo-name\">\n//         {props.user.name}\n//       </div>\n//     </div>\n//   );\n// }\n//\n// function Comment(props) {\n//   return (\n//     <div className=\"Comment\">\n//       <UserInfo user={props.author} />\n//       <div className=\"Comment-text\">\n//         {props.text}\n//       </div>\n//       <div className=\"Comment-date\">\n//         {formatDate(props.date)}\n//       </div>\n//     </div>\n//   );\n// }\n//\n// const comment = {\n//   date: new Date(),\n//   text: 'Ola mundo, text2tag saindo!',\n//   author: {\n//     'avatarUrl': 'https://placekitten.com/g/64/64',\n//     'name': 'Kurier',\n//   },\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <Comment\n//         author={comment.author}\n//         text={comment.text}\n//         date={comment.date}\n//       />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\n// App 10\n// function Clock(props) {\n//   return (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {props.date.toLocaleTimeString()}.</h2>\n//     </div>\n//   );\n// }\n//\n// function tick() {\n//   ReactDOM.render(\n//     <Clock date={new Date()} />,\n//     document.getElementById('root')\n//   );\n// }\n//\n// setInterval(tick, 1000);\n\n// App 11\n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello, world!</h1>\n//         <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     );\n//   }\n// }\n//\n// function tick() {\n//   ReactDOM.render(\n//     <Clock date={new Date()} />,\n//     document.getElementById('root')\n//   );\n// }\n//\n// setInterval(tick, 1000);\n\n\n// App 12\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       date: new Date()\n//     }\n//   }\n//\n//   componentDidMount() {\n//     this.timerID = setInterval(\n//       () => this.tick(),\n//       1000\n//     )\n//   }\n//\n//   componentWillUnmount() {\n//     clearInterval(this.timerID);\n//   }\n//\n//   tick() {\n//     this.setState({\n//       date: new Date()\n//     })\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello, world!</h1>\n//         <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n//       </div>\n//     )\n//   }\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <Clock />\n//       <Clock />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n// App 13\n// function activateLasers() {\n//   console.log('Activate Lasers')\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <button onClick={activateLasers}>\n//         Ativar lasers\n//       </button>\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\n// App 14\n// function ActionLink() {\n//   function handleClick(e){\n//     e.preventDefault()\n//     console.log('O link foi clicado.')\n//   }\n//\n//   return (\n//     <a href=\"#\" onClick={handleClick}>\n//       Clique Aqui\n//     </a>\n//   )\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//     <ActionLink />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\n// App 15\n// class Toggle extends React.Component {\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       isToggleOn: true\n//     }\n//     // Aqui utilizamos o `bind`\n//     // para que o `this` funcione dentro da nossa callback\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n//\n//   handleClick() {\n//     this.setState(state => ({\n//       isToggleOn: !state.isToggleOn\n//     }))\n//   }\n//\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//         {this.state.isToggleOn ? 'ON': 'OFF'}\n//       </button>\n//     )\n//   }\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//     <Toggle />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n// App 16\n// function UserGreeting(props) {\n//   return <h1>Welcome Back!</h1>\n// }\n//\n// function GuestGreenting(props) {\n//   return <h1>Please sign up.</h1>\n// }\n//\n// function Greeting(props) {\n//   const isLoggedIn = props.isLoggedIn;\n//   if (isLoggedIn){\n//     return <UserGreeting />\n//   }\n//   return <GuestGreenting />\n// }\n//\n// function LoginButton(props) {\n//   return (\n//     <button onClick={props.onClick}>\n//       Login\n//     </button>\n//   )\n// }\n//\n// function LogoutButton(props) {\n//   return (\n//     <button onClick={props.onClick}>\n//       Logout\n//     </button>\n//   )\n// }\n//\n// class LoginControl extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleLoginClick = this.handleLoginClick.bind(this);\n//     this.handleLogoutClick = this.handleLogoutClick.bind(this);\n//     this.state = {isLoggedIn: false};\n//   }\n//\n//   handleLoginClick() {\n//     this.setState({isLoggedIn: true});\n//   }\n//\n//   handleLogoutClick() {\n//     this.setState({isLoggedIn: false});\n//   }\n//\n//   render() {\n//     const isLoggedIn = this.state.isLoggedIn;\n//     let button;\n//\n//     if (isLoggedIn) {\n//       button = <LogoutButton onClick={this.handleLogoutClick} />;\n//     } else {\n//       button = <LoginButton onClick={this.handleLoginClick} />;\n//     }\n//\n//     return (\n//       <div>\n//         <Greeting isLoggedIn={isLoggedIn} />\n//         {button}\n//       </div>\n//     );\n//   }\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <LoginControl />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\n// App 17\n// function Mailbox(props) {\n//   const unreadMessages = props.unreadMessages;\n//   return (\n//     <div>\n//       <h1>Hello!</h1>\n//       {unreadMessages.length > 0 &&\n//         <h2>\n//           You have {unreadMessages.length} unread messages.\n//         </h2>\n//       }\n//     </div>\n//   )\n// }\n//\n// const messages = ['Msg 1', 'Msg 2']\n//\n// function App() {\n//   return (\n//     <div>\n//       <Mailbox unreadMessages={messages} />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n\n// App 18\n// function UserGreeting(props) {\n//   return <h1>Welcome Back!</h1>\n// }\n//\n// function GuestGreenting(props) {\n//   return <h1>Please sign up.</h1>\n// }\n//\n// function Greeting(props) {\n//   const isLoggedIn = props.isLoggedIn;\n//   if (isLoggedIn){\n//     return <UserGreeting />\n//   }\n//   return <GuestGreenting />\n// }\n//\n// function LoginButton(props) {\n//   return (\n//     <button onClick={props.onClick}>\n//       Login\n//     </button>\n//   )\n// }\n//\n// function LogoutButton(props) {\n//   return (\n//     <button onClick={props.onClick}>\n//       Logout\n//     </button>\n//   )\n// }\n//\n// class LoginControl extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleLoginClick = this.handleLoginClick.bind(this);\n//     this.handleLogoutClick = this.handleLogoutClick.bind(this);\n//     this.state = {isLoggedIn: false};\n//   }\n//\n//   handleLoginClick() {\n//     this.setState({isLoggedIn: true});\n//   }\n//\n//   handleLogoutClick() {\n//     this.setState({isLoggedIn: false});\n//   }\n//\n//   render() {\n//     const isLoggedIn = this.state.isLoggedIn;\n//     let button;\n//\n//     button = (\n//       isLoggedIn ? (\n//          <LogoutButton onClick={this.handleLogoutClick} />\n//       ) : (\n//         <LoginButton onClick={this.handleLoginClick} />\n//       )\n//     )\n//\n//     return (\n//       <div>\n//         <Greeting isLoggedIn={isLoggedIn} />\n//         {button}\n//         <p>\n//           the user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n//\n// function App() {\n//   return (\n//     <div>\n//       <LoginControl />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n// App 19\n// function WarningBanner(props) {\n//   if (!props.warn) {\n//     return null;\n//   }\n//\n//   return (\n//     <div className=\"warning\">\n//       Warning!\n//     </div>\n//   );\n// }\n//\n// class Page extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {showWarning: true};\n//     this.handleToggleClick = this.handleToggleClick.bind(this);\n//   }\n//\n//   handleToggleClick() {\n//     this.setState(state => ({\n//       showWarning: !state.showWarning\n//     }));\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <WarningBanner warn={this.state.showWarning} />\n//         <button onClick={this.handleToggleClick}>\n//           {this.state.showWarning ? 'Hide' : 'Show'}\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n//\n// ReactDOM.render(\n//   <Page />,\n//   document.getElementById('root')\n// );\n\n// App 20\n// function NumbersMap(props) {\n//   const doubled = props.numbers.map((number) => number * 2)\n//   console.log(doubled)\n//   return doubled.toString()\n// }\n//\n// function NumbersListMap(props) {\n//   const doubled = props.numbers.map(\n//     (number) =>\n//       <li key={number.toString()}>\n//         {number} * 2 = {number * 2}\n//       </li>\n//   )\n//   return (\n//     <ul>\n//       {doubled}\n//     </ul>\n//   )\n// }\n//\n// function NumbersListMap(props) {\n//   const doubled = props.numbers.map(\n//     (number, index) =>\n//       <li key={index}>\n//         {number} * 2 = {number * 2}\n//       </li>\n//   )\n//   return (\n//     <ul>\n//       {doubled}\n//     </ul>\n//   )\n// }\n//\n// const numbers = [1, 2, 3, 4, 5]\n//\n// function App(){\n//   return (\n//     <div>\n//       <NumbersMap numbers={numbers} />\n//       <NumbersListMap numbers={numbers} />\n//     </div>\n//   )\n// }\n//\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n// App 21\nfunction Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\nReactDOM.render(\n  <Blog posts={posts} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}